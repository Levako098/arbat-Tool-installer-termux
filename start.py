from config import *
from config import api_token, log_chat_id, Crypto_Pay_API_Token, sessions_folder
import sqlite3
import logging
from datetime import datetime, timedelta
from decimal import Decimal
import random
import string
import time
import telebot as tb
from telebot import types
import sqlite3
import datetime
from datetime import datetime, timedelta
import os
import json
import re
from telethon import TelegramClient, errors
from telethon.errors import FloodError, PeerFloodError, SessionPasswordNeededError
from telethon.tl.functions.messages import ReportSpamRequest
from telethon.tl.types import PeerUser, PeerChat, PeerChannel
import asyncio
import time
from threading import Timer
import random 
from asyncio import Semaphore, sleep
import threading
import aiogram
import psutil
from telebot import TeleBot
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.utils.exceptions import ChatNotFound
import asyncio
import re
from aiogram.types import ParseMode
from aiogram import executor
import aiosqlite
import json
import random
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import asyncio 
import math
import requests
import aiohttp
import threading
import asyncio
import os
from termcolor import colored
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ReportRequest
import random
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.errors import SessionPasswordNeededError
from telethon.errors import PhoneCodeInvalidError, PhoneNumberInvalidError, FloodWaitError
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeInvalidError, FloodWaitError
from telethon.tl.types import Channel, Chat, InputPeerChannel, InputPeerChat
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonOther, InputReportReasonSpam, Channel, Chat
import aiosqlite

def create_database(): 
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()


    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS users ( 
            id INTEGER PRIMARY KEY, 
            user_id INTEGER UNIQUE, 
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            timeout DATETIME,
            white_list TEXT
        ) 
    ''')
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS api ( 
            api_id TEXT,
            api_hash TEXT,
            session TEXT
        ) 
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promocodes (
            id INTEGER PRIMARY KEY,
            code TEXT UNIQUE NOT NULL,
            days_subscription INTEGER NOT NULL,
            max_activations INTEGER NOT NULL,
            activations_count INTEGER DEFAULT 0,
            used_by TEXT  
        );
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subscriptions (
            user_id INTEGER PRIMARY KEY,
            expiration_date DATETIME
        );
    ''')
    
    conn.commit()
    
create_database()

class GiveSubState(StatesGroup):
    WaitingForUserData = State()
    White = State()
    Spam = State()

# ....... —Ö–∑
COOLDOWN_TIME = 1500 # 5 –º–∏–Ω—É—Ç

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cooldowns = {}
bot = Bot(token=api_token)
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
semaphore = Semaphore(5)
session_locks = {}
lock = asyncio.Lock()


async def check_user(user_id):
    db_path = os.path.join(os.getcwd(), 'database.db')

    try:
        conn = sqlite3.connect(db_path)
        conn.execute('PRAGMA busy_timeout = 3000')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ 3 —Å–µ–∫—É–Ω–¥—ã
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            return True
        else:
            cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                await bot.send_message(
                    log_chat_id,
                    f'<b>üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π <a href="tg:/openmessage?user_id={user_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a></b>\nID: <code>{user_id}</code>',
                    parse_mode='HTML'
                )
            except aiogram.utils.exceptions.ChatNotFound:
                print(f"–û—à–∏–±–∫–∞: log_chat_id={log_chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            except Exception as e:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            return False
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        conn.close()


async def check_subcribe_status(id):
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id=?", (id,))
    subscription = cursor.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    cursor.execute("SELECT white_list FROM users WHERE user_id = ?", (id,))
    white_data = cursor.fetchone()

    # –ï—Å–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç", –∏–Ω–∞—á–µ "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    if white_data:
        white = "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if white_data[0] else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else:
        white = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat = await bot.get_chat(id)
    name = chat.full_name
    username = chat.username
    if username:
        username = f"/ @{username}"
    else:
        username = ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription:
        expiration_date = subscription[0]
        date = datetime.strptime(expiration_date, '%Y-%m-%d %H:%M:%S.%f')
        current_date = datetime.now()
        if current_date <= date:
            status = f"<b>üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüó£ –ò–º—è: {name}\nüóÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: id {id} {username}\nüíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {date}"
        else:
            status = f"<b>üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüó£ –ò–º—è: {name}\nüóÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: id {id} {username}\nüíé –ü–æ–¥–ø–∏—Å–∫–∞: –ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å‚ùå"
    else:
        status = f"<b>üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüó£ –ò–º—è: {name}\nüóÇ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: id {id} {username}\nüíé –ü–æ–¥–ø–∏—Å–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç‚ùå"

    conn.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    return status

async def subscribe_check(user_id):
    async with aiosqlite.connect('database.db') as conn:
        await conn.execute('PRAGMA busy_timeout = 3000')
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id=?", (user_id,))
            subscription = await cursor.fetchone()

            if subscription:
                expiration_date = datetime.strptime(subscription[0], '%Y-%m-%d %H:%M:%S.%f')
                return datetime.now() <= expiration_date
            return False


@dp.message_handler(commands=['start'])
async def home(message: types.Message):
    if message.chat.type != types.ChatType.PRIVATE:
        return

    check_subscription = await subscribe_check(message.from_user.id)

    # –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üí∏Buy botnet", callback_data="buy"))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    button = types.InlineKeyboardMarkup(row_width=2)
    profile = types.InlineKeyboardButton(text="‚úÖ–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    botnet = types.InlineKeyboardButton("‚ò†Ô∏è–†–µ–ø–æ—Ä—Ç–µ—Ä", callback_data="botnet")
    channel = types.InlineKeyboardButton("üîî–ö–∞–Ω–∞–ª", url="https://t.me/+bOH5fsLwqy80ZTM1")

    button.add(profile, botnet, channel)

    if check_subscription:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –±–∞–Ω–Ω–µ—Ä–æ–º –∏ –º–µ–Ω—é
        with open('net1.png', 'rb') as banner1:
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=banner1,
                caption='<b>welcome to ASTRO SNOS üëè</b>',
                reply_markup=button,
                parse_mode='HTML'
            )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        with open('net1.png', 'rb') as banner2:
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=banner2,
                caption='<b>‚ùå –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞! –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ—ë –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.</b>',
                reply_markup=markup,
                parse_mode='HTML'
            )
@dp.callback_query_handler(lambda call: call.data == 'profile')
async def profile(call: types.CallbackQuery):
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = call.from_user.full_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_subscription = await subscribe_check(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    subscription_status = "–µ—Å—Ç—å" if has_subscription else "–Ω–µ—Ç—É"
    message_text = (
        f"üíé –ò–º—è : {user_name}\n"
        f"üÜî Id : {user_id}\n"
        f"üë®‚Äçüíª –ü–æ–¥–ø–∏—Å–∫–∞ : {subscription_status}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        chat_id=call.message.chat.id,  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text=message_text  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    )
        
@dp.callback_query_handler(lambda call: call.data == 'buy')
async def buy(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()
    subscription_options = [
        ("üí≥ 7 –¥–Ω–µ–π - 2$", "buy_7"),
        ("üí≥ 31 –¥–µ–Ω—å - 4$", "buy_31"),
        ("üí≥ 365 –¥–µ–Ω—å - 9$", "buy_365"),
        ("üí≥ –ù–∞–≤—Å–µ–≥–¥–∞ - 12$", "lifetime"),
        ("–ù–∞–∑–∞–¥", "back")
    ]
    for option_text, callback_data in subscription_options:
        markup.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))
    
    await bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="<b>üíé –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ @send\n‚åõÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\nü§ù–û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ –∏–ª–∏ —Ç–≥ –∫–æ—à–µ–ª—å–∫—É –ø–∏—Å–∞—Ç—å \nüî∞@fucking_goose \nüî∞@pplmaycry",
        reply_markup=markup,
        parse_mode="HTML"
    )



@dp.callback_query_handler(lambda call: call.data == 'back')
async def back_to_main(call: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    check_subscription = await subscribe_check(call.from_user.id)

    # –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üí∏Buy botnet", callback_data="buy"))
    markup.add(types.InlineKeyboardButton(f"‚úÖ–ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile"))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    button = types.InlineKeyboardMarkup(row_width=2)
    profile = types.InlineKeyboardButton(text="‚úÖ–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    botnet = types.InlineKeyboardButton("‚ò†Ô∏è–†–µ–ø–æ—Ä—Ç–µ—Ä", callback_data="botnet")
    channel = types.InlineKeyboardButton("üîî–ö–∞–Ω–∞–ª", url="https://t.me/+bOH5fsLwqy80ZTM1")

    button.add(profile, botnet, channel)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if check_subscription:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –±–∞–Ω–Ω–µ—Ä–æ–º –∏ –º–µ–Ω—é
        with open('net1.png', 'rb') as banner1:
            await bot.send_photo(
                chat_id=call.from_user.id,
                photo=banner1,
                caption='<b>welcome to ASTRO SNOSüëè</b>',
                reply_markup=button,
                parse_mode='HTML'
            )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        with open('net1.png', 'rb') as banner2:
            await bot.send_photo(
                chat_id=call.from_user.id,
                photo=banner2,
                caption='<b>‚ùå –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞! –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ—ë –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.</b>',
                reply_markup=markup,
                parse_mode='HTML'
            )


		
	
   

async def generate_payment_link(payment_system, amount):
    api_url = "https://pay.crypt.bot/api/createInvoice"
    headers = {"Crypto-Pay-API-Token": Crypto_Pay_API_Token}
    data = {
        "asset": payment_system,
        "amount": float(amount)
    }

    response = requests.post(api_url, headers=headers, json=data)
    if response.status_code == 200:
        json_data = response.json()
        invoice = json_data.get("result")
        payment_link = invoice.get("pay_url")
        invoice_id = invoice.get("invoice_id")
        return payment_link, invoice_id
    else:
        return None, None

async def get_invoice_status(invoice_id):
    api_url = f"https://pay.crypt.bot/api/getInvoices?invoice_ids={invoice_id}"
    headers = {"Crypto-Pay-API-Token": Crypto_Pay_API_Token}

    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        if json_data.get("ok"):
            invoices = json_data.get("result")
            if invoices and 'items' in invoices and invoices['items']:
                status = invoices['items'][0]['status']
                payment_link = invoices['items'][0]['pay_url']
                amount = Decimal(invoices['items'][0]['amount'])
                value = invoices['items'][0]['asset']
                return status, payment_link, amount, value

    return None, None, None, None

async def get_exchange_rates():
    api_url = "https://pay.crypt.bot/api/getExchangeRates"
    headers = {"Crypto-Pay-API-Token": Crypto_Pay_API_Token}

    response = requests.get(api_url, headers=headers)
    if response.status_code == 200:
        json_data = response.json()
        if json_data.get("ok"):
            return json_data["result"]
    return []

async def convert_to_crypto(amount, asset):
    rates = await get_exchange_rates()
    rate = None
    for exchange_rate in rates:
        if exchange_rate["source"] == asset and exchange_rate["target"] == 'USD':
            rate = Decimal(str(exchange_rate["rate"]))
            break

    if rate is None:
        raise Exception(f"<b>üé≤ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–ª—è {asset}</b>", parse_mode="HTML")

    amount = Decimal(str(amount))
    return amount / rate 
    
    
@dp.callback_query_handler(lambda call: call.data.startswith('buy_'))
async def subscription_duration_selected(call: types.CallbackQuery):
    duration = call.data
    markup = types.InlineKeyboardMarkup()
    currency_options = [
        ("üíµ USDT", "currency_USDT_" + duration),
        ("üíé TON", "currency_TON_" + duration),
        ("üí∞ NOT", "currency_NOT_" + duration),
        ("ü™ô BTC", "currency_BTC_" + duration),
        ("üí∂ ETH", "currency_ETH_" + duration),
        ("–ù–∞–∑–∞–¥", "buy")
    ]
    for option_text, callback_data in currency_options:
        markup.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))
    
    await bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="<b>üí∏  –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )
    
@dp.callback_query_handler(lambda call: call.data.startswith('currency_'))
async def currency_selected(call: types.CallbackQuery):
    parts = call.data.split('_')
    currency = parts[1]
    duration_parts = parts[2:]
    duration = "_".join(duration_parts)

    amount = get_amount_by_duration(duration.replace('buy_', ''))

    try:
        converted_amount = await convert_to_crypto(amount, currency)
        payment_link, invoice_id = await generate_payment_link(currency, converted_amount)
        if payment_link and invoice_id:
            markup = types.InlineKeyboardMarkup()
            oplata = types.InlineKeyboardButton("üí∞  –û–ø–ª–∞—Ç–∏—Ç—å", url=f"{payment_link}")
            check_payment_button = types.InlineKeyboardButton("üí∏  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{call.from_user.id}:{invoice_id}")
            markup.add(oplata, check_payment_button)
            
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"<b>üí∏  –°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n{payment_link}",
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="<b>‚ùå  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                parse_mode="HTML"
            )
    except Exception as e:
        await bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=str(e)
        )

def get_amount_by_duration(duration):
    prices = {
        '1': 1,
        '7': 2,
        '31': 4,
        '365': 9,
        'lifetime': 12
    }
    return prices.get(duration, 0)
    
  
@dp.callback_query_handler(lambda call: call.data.startswith('check_payment:'))
async def check_payment(call: types.CallbackQuery):
    _, user_id_str, invoice_id_str = call.data.split(':')
    user_id = int(user_id_str)
    invoice_id = invoice_id_str
    
    if user_id == call.from_user.id:
        status, payment_link, amount, value = await get_invoice_status(invoice_id)
        
        if status == "paid":
            duration_days = get_duration_by_amount(amount)
            
            expiration_date = datetime.now() + timedelta(days=duration_days)
            await add_subscription(user_id, expiration_date)
            await bot.send_message(
                log_chat_id,
                f"<b>üí∏ –ë—ã–ª–∞ <a href='tg:/openmessage?user_id={user_id}'>–∫—É–ø–ª–µ–Ω–∞</a> –ø–æ–¥–ø–∏—Å–∫–∞\n==========</b>\n"
                f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_id}</b>\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {duration_days}</b>\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {payment_link}\n"
                f"<b>–¶–µ–Ω–∞:</b> {amount} {value}",
                parse_mode="HTML"
            )
            await bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id, 
                caption="<b>‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.</b>",
                parse_mode="HTML"
            )
            await home(call.message)
        else:
            await bot.answer_callback_query(call.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    else:
        await bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç—É –æ–ø–ª–∞—Ç—É.", show_alert=True)

def get_duration_by_amount(amount):
    amount = round(amount, 1)
    if amount <= 1:
        return 1
    elif amount <= 2:
        return 7
    elif amount <= 4:
        return 31
    elif amount <= 9:
        return 365
    elif amount <= 12:
        return 365 * 99  
    else:
        return 0
        
        
class MyState(StatesGroup):
	link = State()
	promo = State()
	delete = State()
 
 
        
        
async def subscribe_check(user_id):
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id=?", (user_id,))
    subscription = cursor.fetchone()
    conn.close()
    return subscription is not None and datetime.now() <= datetime.strptime(subscription[0], '%Y-%m-%d %H:%M:%S.%f')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–º–æ–∫–æ–¥"
@dp.callback_query_handler(lambda call: call.data == 'promo')
async def handle_inline_button_click2(call: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞
    if not await subscribe_check(call.from_user.id):
        await call.message.reply("<b>‚ùåÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏! –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.</b>", parse_mode="HTML")
        return

    with open('net1.png', 'rb') as had:
        await bot.send_photo(call.message.chat.id, had, "<b> –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç:</b>", parse_mode="HTML")
    await MyState.promo.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥
def is_user_in_promocode(user_id, promo_code):
    with sqlite3.connect('database.db', check_same_thread=False) as conn:
        cursor = conn.cursor()

        user_id_str = str(user_id)

        cursor.execute('''
            SELECT 1
            FROM promocodes
            WHERE code = ?
            AND (
                used_by = ? OR                  -- ID –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤ –ø–æ–ª–µ
                used_by LIKE ? OR               -- ID –≤ –Ω–∞—á–∞–ª–µ
                used_by LIKE ? OR               -- ID –≤ –∫–æ–Ω—Ü–µ
                used_by LIKE ?                  -- ID –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
            )
        ''', (
            promo_code,
            user_id_str,
            f'{user_id_str},%',
            f'%,{user_id_str}',
            f'%,{user_id_str},%'
        ))

        result = cursor.fetchone()
        return result is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message_handler(state=MyState.promo)
async def soso(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞
        if not await subscribe_check(message.from_user.id):
            await message.reply("<b>‚ùåÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏! –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.</b>", parse_mode="HTML")
            await home(message)
            await state.finish()
            return

        with sqlite3.connect('database.db') as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
            cursor.execute("SELECT * FROM promocodes WHERE code = ?", (message.text,))
            promocode = cursor.fetchone()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id = ?", (message.from_user.id,))
            expiration_date = cursor.fetchone()

            if expiration_date and expiration_date[0]:
                expiration_date = datetime.strptime(expiration_date[0], '%Y-%m-%d %H:%M:%S.%f')
            else:
                expiration_date = datetime.now()

            # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if promocode is not None:
                already_used = is_user_in_promocode(message.from_user.id, message.text)

                if already_used:
                    await message.reply("<b>‚ùåÔ∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.</b>", parse_mode="HTML")
                    await home(message)
                    await state.finish()
                    return
                elif promocode[4] >= promocode[3]:
                    await message.reply("<b>‚ùåÔ∏è –î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.</b>", parse_mode="HTML")
                    await home(message)
                    await state.finish()
                    return
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
                    new_expiration_date = expiration_date + timedelta(days=promocode[2])
                    new_expiration_date_str = new_expiration_date.strftime('%Y-%m-%d %H:%M:%S.%f')

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                    cursor.execute("INSERT OR REPLACE INTO subscriptions (user_id, expiration_date) VALUES (?, ?)", (message.from_user.id, new_expiration_date_str))

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                    cursor.execute('''
                        UPDATE promocodes 
                        SET used_by = 
                            CASE 
                                WHEN used_by IS NULL OR used_by = '' THEN ?
                                ELSE used_by || ',' || ? 
                            END,
                            activations_count = activations_count + 1
                        WHERE id = ?
                    ''', (str(message.from_user.id), str(message.from_user.id), promocode[0]))

                    conn.commit()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    await message.reply(f"<b>‚úÖÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {promocode[2]} –¥–Ω–µ–π!</b>", parse_mode="HTML")

                    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
                    await bot.send_message(
                        log_chat_id,
                        f"ü©∏ <a href='tg:/openmessage?user_id={message.from_user.id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤–≤–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥ <code>{message.text}</code>\n"
                        f"<b>üîî –î–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b> <code>{promocode[2]}</code>\n"
                        f"<b>üîî –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> <code>{promocode[3] - (1 + promocode[4])}</code>",
                        parse_mode="HTML"
                    )

                    await home(message)
                    await state.finish()

            else:
                await message.reply("<b>‚ùåÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.</b>", parse_mode="HTML")
                await home(message)
                await state.finish()

    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.reply("<b>‚ùåÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.</b>", parse_mode="HTML")
        await home(message)
        await state.finish()
        
        
def load_bypass_users():
    try:
        with open("owner.txt", "r") as file:
            return set(int(line.strip()) for line in file if line.strip().isdigit())
    except FileNotFoundError:
        return set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
def save_bypass_users():
    with open("owner.txt", "w") as file:
        for user_id in bypass_users:
            file.write(f"{user_id}\n")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
bypass_users = load_bypass_users()         

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã botnet
@dp.callback_query_handler(lambda call: call.data == 'botnet')
async def botnet(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = call.message.chat.id  # ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    if user_id in bypass_users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        await call.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode="HTML"
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        current_time = time.time()
        if user_id in user_cooldowns:
            last_used = user_cooldowns[user_id]
            time_left = COOLDOWN_TIME - (current_time - last_used)
            if time_left > 0:
                minutes, seconds = divmod(int(time_left), 60)
                await call.message.answer(
                    f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.",
                    parse_mode="HTML"
                )
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        user_cooldowns[user_id] = current_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await subscribe_check(call.from_user.id):
        await state.finish()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    await call.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ø—É–±–ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ: </b>", parse_mode="HTML")
    await MyState.link.set()
	
session_locks = {}
lock = asyncio.Lock()
	

report_texts = [
    "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º, –∏ –µ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ. –ü—Ä–æ—Å—å–±–∞ –ø—Ä–∏–Ω—è—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.",
    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –Ω–æ—Ä–º–∞–º. –ü—Ä–æ—Å–∏–º —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
    "–í —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–º–µ—á–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –µ–≥–æ —É–¥–∞–ª–∏—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.",
    "–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —è–≤–Ω—ã–º —Å–ø–∞–º–æ–º. –ü—Ä–æ—Å–∏–º –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ä—ã –ø–æ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—é.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∞–º–∞, —á—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.",
    "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–Ω–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞, –ø–æ—ç—Ç–æ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä.",
    "–≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram. –ü—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –ø–æ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—é.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π.",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞ –∏ –º–æ–∂–µ—Ç –≤–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ.",
    "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —è–≤–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ—Å–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç —Å–ª—É—á–∞–π.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ä—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è.",
    "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –Ω–æ—Ä–º–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ü—Ä–æ—Å–∏–º —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.",
    "–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ. –ü—Ä–æ—Å–∏–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –≤ —Å–ª—É—á–∞–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏ –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.",
    "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∞–º –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü—Ä–æ—Å–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ.",
    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.",
    "–í —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–º–∞–Ω—á–∏–≤–æ–π –∏–ª–∏ –Ω–∞—Ä—É—à–∞—é—â–µ–π –ø—Ä–∞–≤–∏–ª–∞. –ü—Ä–æ—Å–∏–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —á—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def subscribe_check(user_id):
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id=?", (user_id,))
    subscription = cursor.fetchone()
    conn.close()
    if subscription:
        expiration_date = datetime.strptime(subscription[0], '%Y-%m-%d %H:%M:%S.%f')
        return datetime.now() <= expiration_date
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã botnet
@dp.callback_query_handler(lambda call: call.data == 'botnet')
async def botnet(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = call.message.chat.id  # ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    if user_id in bypass_users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        await call.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode="HTML"
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        current_time = time.time()
        if user_id in user_cooldowns:
            last_used = user_cooldowns[user_id]
            time_left = COOLDOWN_TIME - (current_time - last_used)
            if time_left > 0:
                minutes, seconds = divmod(int(time_left), 60)
                await call.message.answer(
                    f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.",
                    parse_mode="HTML"
                )
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        user_cooldowns[user_id] = current_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await subscribe_check(call.from_user.id):
        await state.finish()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    await call.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ø—É–±–ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ/—á–∞—Ç–µ: </b>", parse_mode="HTML")
    await MyState.link.set()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
def is_user_in_promocode(user_id, promo_code):
    with sqlite3.connect('database.db', check_same_thread=False) as conn:
        cursor = conn.cursor()
        user_id_str = str(user_id)
        cursor.execute('''
            SELECT 1
            FROM promocodes
            WHERE code = ?
            AND (
                used_by = ? OR
                used_by LIKE ? OR
                used_by LIKE ? OR
                used_by LIKE ?
            )
        ''', (
            promo_code,
            user_id_str,
            f'{user_id_str},%',
            f'%,{user_id_str}',
            f'%,{user_id_str},%'
        ))

        result = cursor.fetchone()
        return result is not None

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
async def send_complaint(client, peer, message_id):
    try:
        await client(ReportRequest(peer, id=[int(message_id)], reason=InputReportReasonSpam(),
                                    message=random.choice(report_texts)))
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã —Å —Å–µ—Å—Å–∏–∏ {client.session.filename}: {e}")
        return False


@dp.message_handler(state=MyState.link)
async def links(message: types.Message, state: FSMContext):
    link = str(message.text)
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()

    print(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {link}")

    if not str(link).startswith("https://t.me/") or str(link).startswith("https://t.me/c/"):
        await message.answer("<b>‚ùåÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (–ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª)</b>", parse_mode="HTML")
        await state.finish()
        await home(message)
        print("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.")
        return

    if '/' not in link:
        await message.answer("<b>‚ùåÔ∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/chat/123456</b>", parse_mode="HTML")
        await state.finish()
        await home(message)
        print("–°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    if len(link) > 80:
        await message.answer("<b>‚ùåÔ∏è –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è!</b>")
        await state.finish()
        await home(message)
        print("–°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è.")
        return

    chat = link.split("/")[-2]
    message_id = link.split("/")[-1]

    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∞–ª–æ–±—ã –¥–ª—è —á–∞—Ç–∞: {chat}, —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")

    await message.answer("<b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∞–ª–æ–±—ã...</b>", parse_mode="HTML")
    await state.finish()

    failed_sessions = 0
    successful_sessions = 0

    cursor.execute("SELECT white_list FROM users")
    white_list = [row[0] for row in cursor.fetchall()]

    # Create a list to collect tasks for parallel processing
    tasks = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π
    async def process_session(session_file):
        nonlocal successful_sessions, failed_sessions

        session_path = os.path.join(sessions_folder, session_file)
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ {session_file}")

        if not os.path.exists(session_path):
            print(f"–°–µ—Å—Å–∏—è {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if not session_file.endswith('.session'):
            print(f"–°–µ—Å—Å–∏—è {session_file} –Ω–µ –∏–º–µ–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è .session.")
            return

        if session_file not in session_locks:
            session_locks[session_file] = asyncio.Lock()

        async with session_locks[session_file]:
            connected = False
            session2 = session_file.split('.')[0]
            try:
                cursor.execute('SELECT api_id, api_hash FROM api WHERE session = ?', (session2,))
                api = cursor.fetchone()
                if api is None:
                   print(f"–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è {session_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                   failed_sessions += 1
                   return
                api_id = int(api[0])
                api_hash = str(api[1])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_file}: {e}")
                failed_sessions += 1
                return

            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {session_file} —Å API_ID: {api_id}")

            client = TelegramClient(session_path, api_id=api_id, api_hash=api_hash, auto_reconnect=True)

            try:
                await client.connect()
                if await client.is_user_authorized():
                    connected = True
                    print(f"–°–µ—Å—Å–∏—è {session_file} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
                else:
                    failed_sessions += 1
                    print(f"–°–µ—Å—Å–∏—è {session_file} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
                    return

                try:
                    entity = await client.get_entity(chat)
                    peer = await client.get_input_entity(entity)

                    if isinstance(entity, (Channel, Chat)):
                        try:
                            message_info = await client.get_messages(entity, ids=int(message_id))

                            if message_info:
                                from_id = message_info.sender_id
                                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç {from_id}.")

                                if int(from_id) in white_list or int(from_id) in admin:
                                    failed_sessions += 1
                                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_id} –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                                    return

                                # Use asyncio.gather to send complaints in parallel
                                all_sent = await asyncio.gather(
                                    *[send_complaint(client, peer, message_id) for _ in range(count)]
                                )

                                if all(all_sent):
                                    successful_sessions += 1
                                    print(f"–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Å–µ—Å—Å–∏–∏ {session_file}.")
                                else:
                                    failed_sessions += 1
                                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É —Å —Å–µ—Å—Å–∏–∏ {session_file}.")
                            else:
                                failed_sessions += 1
                                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                                return

                        except Exception as e:
                            failed_sessions += 1
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Å—Å–∏–∏ {session_file}: {e}")

                except Exception as e:
                    failed_sessions += 1
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ —Å —Å–µ—Å—Å–∏–∏ {session_file}: {e}")

            finally:
                await client.disconnect()
                print(f"–°–µ—Å—Å–∏—è {session_file} –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

    # Add all session processing tasks to the tasks list
    for session_file in os.listdir(sessions_folder):
        if session_file.endswith('.session'):
            tasks.append(process_session(session_file))

    await asyncio.gather(*tasks)


    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π - {successful_sessions}, –Ω–µ—É–¥–∞—á–Ω—ã—Ö - {failed_sessions}")

    await message.answer(f"<b>‚úÖÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
                         f"ü©∏ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {successful_sessions}\n"
                         f"ü©∏ –ù–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {failed_sessions}", parse_mode="HTML")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ª–æ–≥-—á–∞—Ç
        
    await home(message)
    button = types.InlineKeyboardMarkup(row_width=1)
    sender = types.InlineKeyboardButton(text=f"{message.from_user.id}", url=f"tg://openmessage?user_id={message.from_user.id}")
    button.add(sender)

    await bot.send_message(log_chat_id, f"<b>üì¨ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: id {message.from_user.id}\n–¶–µ–ª—å: {message.text}\n–£—Å–ø–µ—à–Ω–æ —Å–µ—Å–∏–π: {successful_sessions}\n–ù–µ—É–¥–∞—á–Ω–æ —Å–µ—Å–∏–π: {failed_sessions}</b>", reply_markup=button, parse_mode="HTML", disable_web_page_preview=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

@dp.message_handler(commands=['adm'])
async def admin_panel(message: types.Message):
	if int(message.chat.id) not in admin:
		return
		
	if message.from_user.id != message.chat.id:
		return
		
		
	markup = types.InlineKeyboardMarkup(row_width=1)
	send_sub = types.InlineKeyboardButton("ü©∏ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='send1_sub')
	white = types.InlineKeyboardButton("ü©∏ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–π—Ç-–ª–∏—Å—Ç", callback_data='white')
	delete = types.InlineKeyboardButton("ü©∏ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='delete')
	spam = types.InlineKeyboardButton("ü©∏ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='spam')
	stat = types.InlineKeyboardButton("ü©∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–µ—Å—Å–∏–π", callback_data='stata')
	state = types.InlineKeyboardButton("ü©∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –õ—é–¥–µ–π", callback_data='stats')
	
	
	
	markup.add(send_sub, white, delete, spam, stat, state)
		
	await bot.send_message(message.chat.id, "<b>‚ùÑÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:</b>", reply_markup=markup, parse_mode="HTML")
	
	
@dp.callback_query_handler(lambda call: call.data == 'stats')
async def stats2(call: types.CallbackQuery, state: FSMContext):
    total_users, subscribed_users = await get_user_counts()
    await bot.send_message(call.from_user.id, 
                           f"<b>‚ùÑÔ∏è Killer Botnet\n‚ùÑÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n‚ùÑÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π: {subscribed_users}</b>", 
                           parse_mode='HTML')


@dp.callback_query_handler(lambda call: call.data == 'stata')
async def stats(call: types.CallbackQuery, state: FSMContext):
	await infor(call.message)
		

async def send_message_to_users(text):
    async with aiosqlite.connect('database.db') as conn:
        cursor = await conn.cursor()
        await cursor.execute('SELECT user_id FROM users')
        rows = await cursor.fetchall()

        for row in rows:
            user_id = row[0]
            try:
                await bot.send_message(user_id, text)
            except Exception:
                pass

@dp.callback_query_handler(lambda call: call.data == 'spam')
async def spaml2(call: types.CallbackQuery, state: FSMContext):
	await bot.send_message(call.from_user.id, "<b>üîé –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: </b>", parse_mode="HTML")
	await GiveSubState.Spam.set()
	
	
	
@dp.message_handler(state=GiveSubState.Spam)
async def spamchok(message: types.Message, state: FSMContext):
    try:
        await send_message_to_users(message.text)
        await message.answer("<b>‚úÖÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>", parse_mode="HTML")
        await state.finish()
        await admin_panel(message)
    except:
        await message.answer("<b>‚ùåÔ∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏!</b>", parse_mode="HTML")
        await state.finish()
        await admin_panel(message)

@dp.callback_query_handler(lambda call: call.data == 'delete')
async def zeros2(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("<b>ü©∏ –í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:</b>", parse_mode="HTML")
    await MyState.delete.set()




async def get_user_counts():
    async with aiosqlite.connect('database.db') as conn:
        cursor = await conn.cursor()

        await cursor.execute('SELECT COUNT(*) FROM users')
        total_users = (await cursor.fetchone())[0]

        await cursor.execute('SELECT COUNT(*) FROM subscriptions')
        subscribed_users = (await cursor.fetchone())[0]

    return total_users, subscribed_users


@dp.message_handler(state=MyState.delete)
async def processing(message: types.Message, state: FSMContext):
    async with aiosqlite.connect('database.db') as conn:
        cursor = await conn.cursor()

        user_id = message.text.strip()

        if not user_id.isdigit():
            await message.answer("<b>‚ùåÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.</b>", parse_mode="HTML")
            await state.finish()
            await home(message)  
            return

        user_id = int(user_id)

        if user_id in admin and (user_id != 7381899082):
            await message.answer("<b>‚ùåÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!</b>", parse_mode="HTML")
            await state.finish()
            await home(message)  
            return
        
        try:
            await cursor.execute("DELETE FROM subscriptions WHERE user_id = ?", (user_id,))
            await conn.commit()
            
            await message.answer("<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–∞!</b>", parse_mode="HTML")
            await state.finish()
            await asyncio.sleep(0.1)
            await home(message)  
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")  
            await message.answer("<b>‚ùåÔ∏è –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>", parse_mode="HTML")
            await state.finish()
            await home(message)
	
	


    
@dp.callback_query_handler(lambda call: call.data == 'send1_sub')
async def sub(call: types.CallbackQuery, state: FSMContext):
	await bot.send_message(call.from_user.id, "<b>‚úç –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª-–≤–æ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>", parse_mode="HTML")
	await GiveSubState.WaitingForUserData.set()
	

@dp.message_handler(state=GiveSubState.WaitingForUserData)
async def process_subscription_data(message: types.Message, state: FSMContext):
    if message.text:
        data = message.text.split(' ')

        async with aiosqlite.connect('database.db') as conn:
            cursor = await conn.cursor()
            await cursor.execute("SELECT expiration_date FROM subscriptions WHERE user_id=?", (int(data[0]),))
            try:
                subu = await cursor.fetchone()
                sub = subu[0]
                subcribe = datetime.strptime(sub, '%Y-%m-%d %H:%M:%S.%f')
            except Exception:
                subcribe = datetime.now()
            
            try:
                expiration_date = subcribe + timedelta(days=int(data[1]))
            except Exception:
                pass
            
            try:
                await add_subscription(data[0], expiration_date)
            except Exception:
                await state.finish()
                await message.answer("<b>ü§ñ –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–µ—Ä–Ω—ã–µ.</b>", parse_mode="HTML")
                await admin_panel(message)
                return
            
            user_id = int(data[0])
            
            try:
                await bot.send_message(
                    user_id, 
                    f"<b>‚úÖ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {data[1]} –¥–Ω–µ–π.\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>", 
                    parse_mode='HTML'
                )
                await bot.send_message(
                    log_chat_id, 
                    f"ü§ñ <a href='tg://openmessage?user_id={message.from_user.id}'>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</a> <b>–≤—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É!</b>\n"
                    f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å (id): {user_id}</b>\n"
                    f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ: {expiration_date}</b>\n"
                    f"<b>–ê–π–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.from_user.id}</b>\n"
                    f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {data[1]}</b>", 
                    parse_mode="HTML"
                )
                await message.reply("<b>ü©∏ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>", parse_mode="HTML")
                await admin_panel(message)
                
            except Exception:
                await bot.send_message(
                    message.from_user.id, 
                    "<b>üñê –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ –ª–∏–±–æ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!</b>", 
                    parse_mode="HTML"
                )
                await admin_panel(message)
                await state.finish()
                return
            
            await state.finish()
        
      
        




async def add_subscription(user_id, expiration_date):
    try:
        async with aiosqlite.connect('database.db') as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(
                    "INSERT OR REPLACE INTO subscriptions (user_id, expiration_date) VALUES (?, ?)",
                    (user_id, expiration_date)
                )
                await conn.commit()
    except sqlite3.Error as db_error:
        raise Exception(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {db_error}")
	
	
@dp.callback_query_handler(lambda call: call.data == 'white')
async def sub2(call: types.CallbackQuery, state: FSMContext):
	await bot.send_message(call.from_user.id, "<b>‚úç –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è / –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è  –≤ –±–µ–ª—ã–π –ª–∏—Å—Ç:</b>", parse_mode="HTML")
	await GiveSubState.White.set()
	



@dp.message_handler(state=GiveSubState.White)
async def proccess_whitelist(message: types.Message, state: FSMContext):
    text = message.text.split()
    
    async with aiosqlite.connect('database.db') as conn:
        cursor = await conn.cursor()

        if len(text) > 1:
            await bot.send_message(message.from_user.id, "<b>‚ùåÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ ID!</b>", parse_mode="HTML")
            await admin_panel(message)
            await state.finish()
            return

        try:
            user_id = int(text[0]) 
            
            await cursor.execute(
                "INSERT OR REPLACE INTO users (user_id, white_list) VALUES (?, ?)",
                (user_id, "yes")
            )
            await conn.commit()  

            await bot.send_message(message.from_user.id, "<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.</b>", parse_mode="HTML")
        except ValueError:
            await bot.send_message(message.from_user.id, "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", parse_mode="HTML")
        except Exception as e:
            await bot.send_message(message.from_user.id, f"<b>‚ùå –û—à–∏–±–∫–∞: {e}</b>", parse_mode="HTML")
        
        await state.finish()
        await admin_panel(message)
    
		


@dp.message_handler(commands=['genpromo'])
async def promo_set(message: types.Message):
    user_id = message.from_user.id
    if int(user_id) not in admin:
        return
    
    text = message.text.split(" ")
    promo_code = text[1]
    days = text[2]
    max_activations = text[3]
    
    
    async with aiosqlite.connect('database.db') as conn:
        cursor = await conn.cursor()
        
        try:
            
            await cursor.execute(
                "INSERT INTO promocodes (code, days_subscription, max_activations) VALUES (?, ?, ?)", 
                (str(promo_code), int(days), int(max_activations))
            )
            await conn.commit()  
            
            await message.answer("<b>üîë –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>", parse_mode="HTML")
            await home(message)
        except aiosqlite.IntegrityError:
            await message.answer("<b>‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>", parse_mode="HTML")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        
	
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
	
